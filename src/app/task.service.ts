import { Component, Injectable, Inject } from '@angular/core';
import { Observable, of } from 'rxjs';
import { tap, map } from 'rxjs/operators';

import { AngularFireDatabase, AngularFireList } from '@angular/fire/database';

import { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';

export class TaskData {
  // $key is used to store unique key automatically
  // generated by firebase when we insert a new record
  $key: string;
  id: string;
  ime: string;
  opis: string;
  kreiran: string;
}

@Injectable({
  providedIn: 'root'
})
export class TaskService {
  private tasksRef: AngularFireList<TaskData>;
  public tasksArray: TaskData[];

  constructor(private db: AngularFireDatabase,
              private modal: MatDialog) {
    this.tasksRef = db.list('/tasks');
  }

  getTasks(): AngularFireList<TaskData> {
    return this.tasksRef;
  }

  getTask(taskId: string): TaskData {
    return this.tasksArray.find(item => item.id === taskId);
  }

  createTask(): void {
    const modalRef = this.modal.open(ModalAddTask);

    modalRef.afterClosed()
      .subscribe(result => {
        if(result) this.tasksRef.push(result);
      }
    );
  }

  updateTask(task: TaskData, showExternalLink: boolean, onSuccess = null) {
    const modalRef = this.modal.open(ModalEditTask, {
      // width: '50%',
      // height: '70%',
      data: {
        id: task.id,
        ime: task.ime,
        opis: task.opis,
        // kreiran: task.kreiran
        showExternalLink: showExternalLink
      }
    });

    modalRef.afterClosed().subscribe(
      result => {
        if(result) {
          var object = {
            id: task.id,
            ime: result.ime,
            opis: result.opis,
            kreiran: task.kreiran
          };
          if(onSuccess) onSuccess(object);
          this.tasksRef.update(task.$key, object as TaskData);
        }
      }
    );
  }

  deleteTasks(tasks: TaskData[], onSuccess = null) {
    const modalRef = this.modal.open(ModalDeleteTask, {
      data: true
    });
    
    modalRef.afterClosed().subscribe(
      result => {
        if(result) {
          if(onSuccess) onSuccess();
          tasks.forEach(task => this.tasksRef.remove(task.$key));
        }
      }
    );
  }

  deleteTask(task: TaskData, onSuccess = null) {
    const modalRef = this.modal.open(ModalDeleteTask, {
      data: false
    });

    modalRef.afterClosed().subscribe(
      result => {
        if(result) {
          if(onSuccess) onSuccess();
          this.tasksRef.remove(task.$key);
        }
      }
    );
  }
}


@Component({
  selector: 'modal-add-task',
  templateUrl: 'modal-add-task.html',
  styles: [`
    div.mat-dialog-content {
      width: 100%;
    }
    .full-width {
      width: 100%;
    }
  `]
})
export class ModalAddTask {
  ime: string = '';
  opis: string = '';

  isInputEmpty: boolean = false;

  constructor(private modalRef: MatDialogRef<ModalAddTask>) {}

  onBackClick() {
    this.modalRef.close(null);
  }

  closeModal() {
    if(this.ime === '') { 
      this.isInputEmpty = true;
      return;
    }

    var object = {
      id: Date.now().toString(),
      ime: this.ime,
      opis: this.opis,
      kreiran: new Date(Date.now()).toUTCString()
    };

    this.modalRef.close(object);
  }
}


@Component({
  selector: 'modal-edit-task',
  templateUrl: 'modal-edit-task.html',
  styleUrls: ['modal-edit-task.css']
})
export class ModalEditTask {
  constructor(
    public modalRef: MatDialogRef<ModalEditTask>,
    @Inject(MAT_DIALOG_DATA) public task: TaskData) {}
  
  closeModal() {
    this.modalRef.close(null);
  }
}


@Component({
  selector: 'modal-delete-task',
  template: `
  <h1 *ngIf="showForMoreRecords" mat-dialog-title>Are you sure you want to delete this records?</h1>
  <h1 *ngIf="!showForMoreRecords" mat-dialog-title>Are you sure you want to delete this record?</h1>
  <div mat-dialog-actions align="center">
    <button mat-raised-button [mat-dialog-close]="false">No</button>
    <button mat-raised-button color="warn" [mat-dialog-close]="true" cdkFocusInitial>Yes</button>
  </div>
  `
})
export class ModalDeleteTask {
  constructor(@Inject(MAT_DIALOG_DATA) public showForMoreRecords: boolean) {}
}